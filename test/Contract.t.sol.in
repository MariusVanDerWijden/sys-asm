// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Contract.sol";

address constant addr = 0x000000000000000000000000000000000000aaaa;
address constant fakeExpo = 0x000000000000000000000000000000000000BbBB;
address constant testCaller = 0x000000000000000000000000000000000000CcCc;
address constant sysaddr = 0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE;

uint256 constant excess_exits_slot = 0;
uint256 constant exit_count_slot   = 1;
uint256 constant queue_head_slot   = 2;
uint256 constant queue_tail_slot   = 3;

uint256 constant queue_storage_offset = 4;
uint256 constant target_exits = 2;
uint256 constant max_exits = 16;

contract ContractTest is Test {
  address unit;

  function setUp() public {
    vm.etch(addr, hex"@bytecode@");
    vm.etch(fakeExpo, hex"@bytecode2@");
    unit = addr;
  }

  // testFakeExpo calls the fake exponentiation logic with specific values.
  function testFakeExpo() public {
    assertEq(callFakeExpo(1, 100, 17), 357);
  }

  // testInvalidExit checks that common invalid exit submissions are rejected.
  function testInvalidExit() public {
    // pubkey too small
    (bool ret,) = addr.call{value: 1e18}(hex"1234");
    assertEq(ret, false);

    // pubkey 47 bytes
    (ret,) = addr.call{value: 1e18}(hex"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    assertEq(ret, false);

    // fee too small
    (ret,) = addr.call{value: 0}(hex"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    assertEq(ret, false);
  }

  // testExit verifies a single exit below the target exit count is accepted and
  // read successfully.
  function testExit() public {
    bytes memory pk = hex"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    (bool ret,) = addr.call{value: 2}(pk);
    assertEq(ret, true);
    assertStorage(exit_count_slot, 1, "unexpected exit count");
    assertExcess(0);

    bytes memory exit = getExits();
    assertEq(exit.length, 68);
    assertEq(toFixed(exit, 20, 52), toFixed(pk, 0, 32));
    assertEq(toFixed(exit, 52, 68), toFixed(pk, 32, 48));
    assertStorage(exit_count_slot, 0, "unexpected exit count");
    assertExcess(0);
  }

  // testQueueReset verifies that after a period of time where there are more
  // exits than can be read per block, the queue is eventually cleared and the
  // head and tails are reset to zero.
  function testQueueReset() public {
    // Add more exits than the max exits per block (16) so that the queue is not
    // immediately emptied.
    for (uint i = 0; i < max_exits+1; i++) {
      addExit(address(uint160(i)), makePubkey(i), 2);
    }
    assertStorage(exit_count_slot, max_exits+1, "unexpected exit count");

    // Simulate syscall, check that max exits per block are read.
    checkExits(0, max_exits);
    assertExcess(15);

    // Add another batch of max exits per block (16) so the next read leaves a
    // single exit in the queue.
    for (uint i = 17; i < 33; i++) {
      addExit(address(uint160(i)), makePubkey(i), 2);
    }
    assertStorage(exit_count_slot, max_exits, "unexpected exit count");

    // Simulate syscall. Verify first that max exits per block are read. Then
    // verify only the single final exit is read.
    checkExits(16, max_exits);
    assertExcess(29);
    checkExits(32, 1);
    assertExcess(27);

    // Now ensure the queue is empty and has reset to zero.
    assertStorage(queue_head_slot, 0, "expected queue head reset");
    assertStorage(queue_tail_slot, 0, "expected queue tail reset");

    // Add five (5) more exits to check that new exits can be added after the queue
    // is reset.
    for (uint i = 33; i < 38; i++) {
      addExit(address(uint160(i)), makePubkey(i), 4);
    }
    assertStorage(exit_count_slot, 5, "unexpected exit count");

    // Simulate syscall, read only the max exits per block.
    checkExits(33, 5);
    assertExcess(30);
  }


  // testExitFee adds many exits, and verifies the exit fee decreases correctly
  // until it returns to 0.
  function testExitFee() public {
    uint idx = 0;
    uint count = max_exits*64;

    // Add a bunch of exits.
    for (; idx < count; idx++) {
      addExit(address(uint160(idx)), makePubkey(idx), 1);
    }
    assertStorage(exit_count_slot, count, "unexpected exit count");
    checkExits(0, max_exits);

    uint read = max_exits;
    uint excess = count - target_exits;

    // Attempt to add an expect with fee too low and an exit with fee exactly
    // correct. This should cause the excess exits counter to decrease by 1 each
    // iteration.
    for (uint i = 0; i < count; i++) {
      assertExcess(excess);
      
      uint fee = computeExitFee(excess);
      addFailedExit(address(uint160(idx)), makePubkey(idx), fee-1);
      addExit(address(uint160(idx)), makePubkey(idx), fee);

      uint expected = min(idx-read+1, max_exits);
      checkExits(read, expected);

      if (excess != 0) {
        excess--;
      }
      read += expected;
      idx++;
    }

  }

  function min(uint x, uint y) internal pure returns (uint) {
    if (x < y) {
      return x;
    }
    return y;
  }

  function addFailedExit(address from, bytes memory pubkey, uint256 value) internal {
    vm.deal(from, value);
    vm.prank(from);
    (bool ret,) = addr.call{value: value}(pubkey);
    assertEq(ret, false, "expected exit to fail");
  }

  // addExit will submit an exit to the system contract with the given values.
  function addExit(address from, bytes memory pubkey, uint256 value) internal {
    // Load tail index before adding exit.
    uint256 exits = load(exit_count_slot);
    uint256 tail = load(queue_tail_slot);

    // Send exit from address.
    vm.deal(from, value);
    vm.prank(from);
    (bool ret,) = addr.call{value: value}(pubkey);
    assertEq(ret, true, "expected call to succeed");

    // Verify the queue data was updated correctly.
    assertStorage(exit_count_slot, exits+1, "unexpected exit count");
    assertStorage(queue_tail_slot, tail+1, "unexpected tail slot");

    // Verify the exit was written to the queue.
    uint256 idx = queue_storage_offset+tail*3;
    assertStorage(idx, uint256(uint160(from)), "addr not written to queue");
    assertStorage(idx+1, toFixed(pubkey, 0, 32), "pk[0:32] not written to queue");
    assertStorage(idx+2, toFixed(pubkey, 32, 48), "pk[32:48] not written to queue");
  }

  // getExits will simulate a system call to the system contract.
  function getExits() internal returns (bytes memory) {
    vm.prank(sysaddr);
    (bool ret, bytes memory data) = addr.call("");
    assertEq(ret, true);
    return data;
  }

  // checkExits will simulate a system call to the system contract and verify
  // the expected exits are returned.
  //
  // It assumes that addresses are stored as uint256(index) and pubkeys are
  // uint8(index), repeating.
  function checkExits(uint startIndex, uint count) internal returns (uint) {
    bytes memory exits = getExits();
    assertEq(exits.length, count*68);
    for (uint i = 0; i < count; i++) {
      uint offset = i*68;
      assertEq(toFixed(exits, offset, offset+20) >> 96, uint256(startIndex+i), "unexpected exit value returned");
      assertEq(toFixed(exits, offset+20, offset+52), toFixed(makePubkey(startIndex+i), 0, 32), "unexpected exit value returned");
      assertEq(toFixed(exits, offset+52, offset+68), toFixed(makePubkey(startIndex+i), 32, 48), "unexpected exit value returned");
    }
    return count;
  }

  function load(uint256 slot) internal view returns (uint256) {
    return uint256(vm.load(addr, bytes32(slot)));
  }

  function assertStorage(uint256 slot, uint256 value, string memory err) internal {
    bytes32 got = vm.load(addr, bytes32(slot));
    assertEq(got, bytes32(value), err);
  }

  function assertExcess(uint count) internal {
    assertStorage(excess_exits_slot, count, "unexpected excess exits");
    (, bytes memory data) = addr.call("");
    assertEq(toFixed(data, 0, 32), count, "unexpected excess exits");
  }

  function toFixed(bytes memory data, uint256 start, uint256 end) internal pure returns (uint256) {
    require(end-start <= 32, "range cannot be larger than 32 bytes");
    bytes memory out = new bytes(32);
    for (uint256 i = start; i < end; i++) {
      out[i-start] = data[i];
    }
    return uint256(bytes32(out));
  }

  function makePubkey(uint x) internal pure returns (bytes memory) {
    bytes memory out = new bytes(48);
    for (uint i = 0; i < 48; i++) {
      out[i] = bytes1(uint8(x));
    }
    return out;
  }

  function computeExitFee(uint excess) internal returns (uint) {
    return callFakeExpo(1, int(excess), 17);
  }

  function callFakeExpo(int factor, int numerator, int denominator) internal returns (uint) {
    (, bytes memory data) = fakeExpo.call(bytes.concat(bytes32(uint256(factor)), bytes32(uint256(numerator)), bytes32(uint256(denominator))));
    return toFixed(data, 0, 32);
  }
}
